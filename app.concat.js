!function(){"use strict";function e(e,t,o,n){t.server_url="http://stg1.jwtdigitalpr.com/mpto",t.upload_url=t.server_url+"/api/upload",t.isType=function(e,t,o){var n=!1;return t==e?n=!0:o&&void 0!=o.type&&(n=o.type.indexOf(e)>-1),n},null==o.getCurrentUser()?e.go("login"):e.go("videos"),t.$on("$stateChangeStart",function(e,o){if(o.data)var r=o.data.authorizedRoles;r&&!n.isAuthorized(r)&&(e.preventDefault(),t.$broadcast("unauthorized"))})}function t(e){var t=e.extendPalette("light-blue",{contrastDefaultColor:"light",contrastDarkColors:["50"],50:"ffffff"});e.definePalette("customBlue",t),e.theme("default").primaryPalette("customBlue",{"default":"500","hue-1":"50"}).accentPalette("pink"),e.theme("input","default").primaryPalette("grey")}var o=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,o,n){if(n){e.$watch(o.ngModel,function(){r()}),o.$observe("equals",function(e){r()});var r=function(){var e=n.$viewValue,t=o.equals;n.$setValidity("equals",!e||!t||e===t)}}}}},n=function(){return function(e,t){return e?e.replace(/([^\W_]+[^\s-]*) */g,function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()}):""}};angular.module("backendApp",["angular-storage","ngFileUpload","ngMaterial","data-table","ngResource","ngMessages","ui.router","backendApp.controllers","backendApp.services"]).config(t).constant("USER_ROLES",{admin:"admin",editor:"editor",editorPlus:"editorPlus",analista:"analista",lector:"lector"}).run(e).filter("capitalize",n).directive("equals",o),angular.module("backendApp.controllers",[]),angular.module("backendApp.services",[]),e.$inject=["$state","$rootScope","UserService","AuthService"],t.$inject=["$mdThemingProvider"]}(),function(){"use strict";function e(e,t,o,n){o.interceptors.push("APIInterceptor"),e.state("ads",{url:"/promos/:id",controller:"AdListController",controllerAs:"vm",templateUrl:"partials/promos/list.html",data:{authorizedRoles:[t.admin,t.editorPlus]}}).state("canciones",{url:"/canciones/:id",controller:"CancionListController",controllerAs:"vm",templateUrl:"partials/canciones/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("categorias",{url:"/categorias/:id",controller:"CategoriaListController",controllerAs:"vm",templateUrl:"partials/categorias/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("cuentos",{url:"/cuentos/:id",controller:"CuentoController",controllerAs:"vm",templateUrl:"partials/cuentos/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("comentarios",{url:"/comentarios/:id",controller:"ComentarioController",controllerAs:"vm",templateUrl:"partials/comentarios/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("discos",{url:"/discos/:id",controller:"DiscoListController",controllerAs:"vm",templateUrl:"partials/discos/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("eventos",{url:"/eventos",controller:"EventoListController",controllerAs:"vm",templateUrl:"partials/eventos/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("noticias",{url:"/noticias",controller:"NoticiaListController",controllerAs:"vm",templateUrl:"partials/noticias/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("videos",{url:"/videos",controller:"VideoListController",controllerAs:"vm",templateUrl:"partials/videos/list.html",data:{authorizedRoles:[t.admin,t.editor,t.editorPlus]}}).state("users",{url:"/users",controller:"UserListController",controllerAs:"vm",templateUrl:"partials/users/list.html",data:{authorizedRoles:[t.admin]}}).state("integrantes",{url:"/integrantes/:id",controller:"IntegranteListController",controllerAs:"vm",templateUrl:"partials/integrantes/list.html",data:{authorizedRoles:[t.admin]}}).state("login",{url:"/login",controller:"LoginController",controllerAs:"vm",templateUrl:"partials/login.html"})}angular.module("backendApp").config(e),e.$inject=["$stateProvider","USER_ROLES","$httpProvider","$provide"]}(),function(){"use strict";angular.module("backendApp.services").factory("Ad",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/ads/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Cancion",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/canciones/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Categoria",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/categorias/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Comentario",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/comentarios/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Cuento",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/cuentos/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Disco",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/discos/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Evento",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/eventos/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Integrante",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/integrantes/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("User",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/users/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Noticia",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/noticias/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Video",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/videos/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("Tag",["$resource","$rootScope",function(e,t){return e(t.server_url+"/api/tags/:id",null,{update:{method:"PUT"}})}]),angular.module("backendApp.services").factory("AuthService",["$rootScope","$http","UserService",function(e,t,o){var n={};return n.login=function(n){var r=t.post(e.server_url+"/api/login",n);return r.then(function(t){var n=t.data;n.error?alert("BAD LOGIN"):(o.setCurrentUser(n),e.$broadcast("authorized"))},function(){e.$broadcast("unauthorized")}),r},n.logout=function(){t.post(e.server_url+"/api/logout");e.$broadcast("unauthorized")},n.isAuthenticated=function(){return null!=o.getCurrentUser()},n.isAuthorized=function(e){return angular.isArray(e)||(e=[e]),n.isAuthenticated()&&-1!==e.indexOf(o.getCurrentUser().role.toLowerCase())},n}]),angular.module("backendApp.services").service("UserService",["store",function(e){var t=this,o=null;t.setCurrentUser=function(t){return o=t,e.set("user-backend",t),o},t.getCurrentUser=function(){return o||(o=e.get("user-backend")),o}}]),angular.module("backendApp.services").service("APIInterceptor",["$rootScope","UserService",function(e,t){var o=this;o.request=function(e){var o=t.getCurrentUser(),n=o?o.access_token:null;return n&&(e.headers.Authorization=n),e},o.responseError=function(t){return 401===t.status&&e.$broadcast("unauthorized"),t}}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("HeaderController",["$scope","$mdSidenav","$rootScope",function(e,t,o){e.openLeftMenu=function(){t("side-nav").toggle()},o.$on("$stateChangeSuccess",function(t,o,n,r,i){e.state=o})}]),angular.module("backendApp.controllers").controller("MenuController",["$scope","USER_ROLES",function(e,t){e.menu=[{link:"ads",title:"Ads",icon:"add_shopping_cart",roles:[t.admin,t.editorPlus]},{link:"canciones",title:"Canciones",icon:"music_note",roles:[t.admin,t.editor,t.editorPlus]},{link:"categorias",title:"Categorias",icon:"filter_list",roles:[t.admin,t.editor,t.editorPlus]},{link:"comentarios",title:"Comentarios",icon:"book",roles:[t.admin,t.editor,t.editorPlus]},{link:"cuentos",title:"Cuentos",icon:"book",roles:[t.admin,t.editor,t.editorPlus]},{link:"discos",title:"Discos",icon:"library_music",roles:[t.admin,t.editor,t.editorPlus]},{link:"eventos",title:"Eventos",icon:"event",roles:[t.admin,t.editor,t.editorPlus]},{link:"integrantes",title:"Integrantes",icon:"account_circle",roles:[t.admin]},{link:"noticias",title:"Noticias",icon:"new_releases",roles:[t.admin,t.editor,t.editorPlus]},{link:"videos",title:"Videos",icon:"video_library",roles:[t.admin,t.editor,t.editorPlus]},{link:"users",title:"Usuarios",icon:"account_circle",roles:[t.admin]}]}]),angular.module("backendApp.controllers").controller("MainCtrl",["$scope","$rootScope","$state","AuthService","UserService",function(e,t,o,n,r){function i(e,t,o){o<e.length&&o>=0?e[o]=t:e.push(t)}var s=this;e.isAuthorized=n.isAuthorized,t.$on("authorized",function(){s.currentUser=r.getCurrentUser()}),t.$on("unauthorized",function(){s.currentUser=r.setCurrentUser(null),o.go("login")}),t.addOrUpdateList=i,s.logout=n.logout,s.currentUser=r.getCurrentUser()}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("LoginController",["$scope","$rootScope","AuthService","$state",function(e,t,o,n){e.credentials={email:"",password:""},e.login=function(t){o.login(t).then(function(t){var o=t.data;o.error?e.form.$isValid=!1:n.go("noticias")})},e.register=function(){LoginService.register(e.newUser).then(function(t){e.login(e.newUser)})},e.newUser=null}])}(),function(){"use strict";function e(e,t,o,n,r,i,s){function a(){return p.attempted=!0,p.submitting=!0,e.form.$valid?void(p.fileChanged?d():p.edit?u():c()):!1}function l(){p.fileChanged=!0}function d(){s.upload({url:t.upload_url,file:p.cancion.audio_source}).progress(function(e){p.progress=parseInt(100*e.loaded/e.total)}).success(function(e,t,o,n){p.cancion.audio_source=e.url,p.fileChanged=!0,p.progress=0,p.edit?u():c()}).error(function(e,t,n,r){o.show(o.simple().content(e.error).theme("error-toast")),p.submitting=!1,p.progress=0})}function c(){r.save(p.cancion).$promise.then(function(e,t,r){console.log(t),console.log(r),e.error?o.show(o.simple().content(e.error).theme("error-toast")):(n.hide(e),o.show(o.simple().content("Nueva cancion guardado"))),p.submitting=!1})}function u(){r.update({id:p.cancion.id},p.cancion).$promise.then(function(e){p.submitting=!1,n.hide(p.cancion)})}var p=this;p.edit=!1,p.discos=i.query(),p.progress=0,p.submitting=!1,p.fileChanged=!1,p.attempted=!1,p.submit=a,p.fileChange=l,p.hide=n.hide,void 0!=e.selectedItem?(p.cancion=e.selectedItem,p.cancion.disco_id=p.cancion.disco.id,p.edit=!0):p.cancion=new r}angular.module("backendApp.controllers").controller("AddCancionController",e),e.$inject=["$scope","$rootScope","$mdToast","$mdDialog","Cancion","Disco","Upload"]}(),function(){"use strict";function e(e,t,o,n,r,i){function s(){r.id&&t.get({id:r.id}).$promise.then(function(e){c(e)})}function a(e){o.show({controller:"AddCancionController",controllerAs:"vm",templateUrl:"partials/canciones/add.html",parent:angular.element(document.body),targetEvent:e}).then(function(e){1!=e&&addOrUpdateList(u.canciones,e)})}function l(e,o){o.preventDefault(),o.stopPropagation(),t["delete"]({id:e.id}).$promise.then(function(t){if(t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var o=u.canciones.indexOf(e);u.canciones.splice(o,1)}})}function d(e){i.go("canciones",{id:e.id},{notify:!1}),c(e)}function c(t){e.selectedItem=angular.copy(t);var n=u.canciones.indexOf(t);o.show({controller:"AddCancionController",controllerAs:"vm",templateUrl:"partials/canciones/add.html",parent:angular.element(document.body),scope:e.$new()}).then(function(e){1!=e&&$rootScope.addOrUpdateList(u.canciones,e,n),i.go("canciones",{id:""},{notify:!1})})}var u=this;u.canciones=t.query(),u.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},u.showAdd=a,u["delete"]=l,u.showEdit=d,u.hide=o.cancel,s()}angular.module("backendApp.controllers").controller("CancionListController",e),e.$inject=["$scope","Cancion","$mdDialog","$mdToast","$stateParams","$state"]}(),function(){"use strict";function e(e,t,o,n){function r(){void 0!=e.selectedItem?(l.categoria=e.selectedItem,l.edit=!0):l.categoria=new n}function i(){return l.attempted=!0,e.form.$valid?void(l.edit?a():s()):!1}function s(){n.save(l.categoria).$promise.then(function(e){e.error?t.show(t.simple().content(e.error).theme("error-toast")):(o.hide(e),t.show(t.simple().content("Nuevo ad guardado"))),l.submitting=!1})}function a(){n.update({id:l.categoria.id},l.categoria).$promise.then(function(e){l.submitting=!1,o.hide(l.categoria)})}var l=this;l.categoria=null,l.edit=!1,l.hide=o.hide,l.submitting=!1,l.attempted=!1,l.submit=i,r()}angular.module("backendApp.controllers").controller("AddCategoriaController",e),e.$inject=["$scope","$mdToast","$mdDialog","Categoria"]}(),function(){"use strict";function e(e,t,o,n,r,i,s){function a(){s.id&&e.get({id:s.id}).$promise.then(function(e){u(e)})}function l(e){i.go("categorias",{id:e.id},{notify:!1}),u(e)}function d(e){n.show({controller:"AddCategoriaController",controllerAs:"vm",templateUrl:"partials/categorias/add.html",parent:angular.element(document.body),targetEvent:e}).then(function(e){void 0!==e&&p.categorias.push(e)})}function c(t,o){o.preventDefault(),o.stopPropagation();var i=n.confirm().content("Esta seguro que desea borrar este elemento").ok("Borrar").cancel("Cancelar").targetEvent(o);n.show(i).then(function(){e["delete"]({id:t.id}).$promise.then(function(e){if(e.error)r.show(r.simple().content(e.error).theme("error-toast"));else{r.show(r.simple().content(e.message));var o=p.categorias.indexOf(t);p.categorias.splice(o,1)}})})}function u(e){o.selectedItem=e;var r=p.categorias.indexOf(e);n.show({controller:"AddCategoriaController",controllerAs:"vm",templateUrl:"partials/categorias/add.html",parent:angular.element(document.body),scope:o.$new()}).then(function(e){console.log("back",e),1!=e&&t.addOrUpdateList(p.categorias,e,r),i.go("categorias",{id:""},{notify:!1})})}var p=this;p.categorias=e.query(),p.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},p.showAdd=d,p["delete"]=c,p.showEdit=l,a()}angular.module("backendApp.controllers").controller("CategoriaListController",e),e.$inject=["Categoria","$rootScope","$scope","$mdDialog","$mdToast","$state","$stateParams"]}(),function(){"use strict";angular.module("backendApp.controllers").controller("ComentarioController",["$scope","Comentario","$mdDialog","$mdToast",function(e,t,o,n){function r(e,t){e.comentario=e.selectedItem,console.log("INIT",e.comentario)}var i;t.query().$promise.then(function(t){e.comentarios=i=t,e.filter()}),e.hide=o.hide,e.options={rowHeight:"auto",footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.filters={aprobados:!1,pendientes:!0,rechazados:!1},e.filter=function(t){i&&(e.filters.aprobados||e.filters.pendientes||e.filters.rechazados?e.comentarios=i.filter(function(t){var o=t.aprobado,n=!1;switch(o){case 1:n=e.filters.aprobados;break;case 0:n=e.filters.rechazados;break;case-1:n=e.filters.pendientes}return n}):e.comentarios=[])},e.$watch("filters",e.filter,!0),e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.comentarios.indexOf(o);e.comentarios.splice(r,1),i.splice(r,1)}})},e.approve=function(n,r,i){i.preventDefault(),i.stopPropagation(),o.hide(),console.log("aprobar",n),n.aprobado=r?1:0,e.filter(),e.submitting=!0,t.update({id:n.id},n).$promise.then(function(t){e.submitting=!1,o.hide(n)})},e.showEdit=function(t){e.selectedItem=t,o.show({templateUrl:"partials/comentarios/add.html",parent:angular.element(document.body),scope:e.$new(),controller:r})},r.$inject=["$scope","$mdDialog"]}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("CuentoController",["$scope","Cuento","$mdDialog","$mdToast",function(e,t,o,n){function r(e,t){console.log("INIT"),e.cuento=e.selectedItem}var i;t.query().$promise.then(function(t){e.cuentos=i=t}),e.hide=o.hide,e.options={rowHeight:"auto",footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.filters={aprobados:!1,pendientes:!1,rechazados:!1},e.filter=function(t){i&&(e.filters.aprobados||e.filters.pendientes||e.filters.rechazados?e.cuentos=i.filter(function(t){var o=t.aprobado;switch(o){case 1:var n=e.filters.aprobados;break;case 0:var n=e.filters.rechazados;break;case-1:var n=e.filters.pendientes}return n}):e.cuentos=i)},e.$watch("filters",e.filter,!0),e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.cuentos.indexOf(o);e.cuentos.splice(r,1),i.splice(r,1)}})},e.approve=function(n,r,i){i.preventDefault(),i.stopPropagation(),o.hide(),console.log("aprobar",n),n.aprobado=r?1:0,e.filter(),e.submitting=!0,t.update({id:n.id},n).$promise.then(function(t){e.submitting=!1,o.hide(n)})},e.showEdit=function(t){e.selectedItem=t,o.show({templateUrl:"partials/cuentos/add.html",parent:angular.element(document.body),scope:e.$new(),controller:r})},r.$inject=["$scope","$mdDialog"]}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("CuentoController",["$scope","Cuento","$mdDialog","$mdToast",function(e,t,o,n){function r(e,t){console.log("INIT"),e.cuento=e.selectedItem}var i;t.query().$promise.then(function(t){e.cuentos=i=t}),e.hide=o.hide,e.options={rowHeight:"auto",footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.filters={aprobados:!1,pendientes:!1,rechazados:!1},e.filter=function(t){i&&(e.filters.aprobados||e.filters.pendientes||e.filters.rechazados?e.cuentos=i.filter(function(t){var o=t.aprobado;switch(o){case 1:var n=e.filters.aprobados;break;case 0:var n=e.filters.rechazados;break;case-1:var n=e.filters.pendientes}return n}):e.cuentos=i)},e.$watch("filters",e.filter,!0),e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.cuentos.indexOf(o);e.cuentos.splice(r,1),i.splice(r,1)}})},e.approve=function(n,r,i){i.preventDefault(),i.stopPropagation(),o.hide(),console.log("aprobar",n),n.aprobado=r?1:0,e.filter(),e.submitting=!0,t.update({id:n.id},n).$promise.then(function(t){e.submitting=!1,o.hide(n)})},e.showEdit=function(t){e.selectedItem=t,o.show({templateUrl:"partials/cuentos/add.html",parent:angular.element(document.body),scope:e.$new(),controller:r})},r.$inject=["$scope","$mdDialog"]}])}(),function(){"use strict";function e(e,t,o,n,r,i){function s(){void 0!=t.selectedItem?(u.disco=t.selectedItem,u.edit=!0):u.disco=new r}function a(){return u.attempted=!0,t.form.$valid?void(u.fileChanged?d():u.edit?c():l()):!1}function l(){u.disco.$save(function(e){n.hide(u.disco),u.submitting=!1,o.show(o.simple().content("Nuevo disco guardado"))},function(e){o.show(o.simple().content(e.data.error).theme("error-toast")),u.submitting=!1})}function d(){u.submitting=!0,i.upload({url:e.upload_url,file:u.disco.cover_img}).progress(function(e){u.progress=parseInt(100*e.loaded/e.total)}).success(function(e,t,o,n){u.disco.cover_img=e.url,u.fileChanged=!0,u.progress=0,u.edit?c():l()}).error(function(e,t,n,r){o.show(o.simple().content(e.error).theme("error-toast")),u.submitting=!1,u.progress=0})}function c(){r.update({id:u.disco.id},u.disco).$promise.then(function(e){u.submitting=!1,n.hide(u.disco)})}var u=this;u.hide=n.hide,u.edit=!1,u.disco=null,u.submitting=!1,u.attempted=!1,u.progress=0,u.fileChanged=!1,u.fileChange=function(){u.fileChanged=!0},u.submit=a,s()}angular.module("backendApp.controllers").controller("AddDiscoController",e),e.$inject=["$rootScope","$scope","$mdToast","$mdDialog","Disco","Upload"]}(),function(){"use strict";function e(e,t,o,n,r,i,s){function a(){s.id&&n.get({id:s.id}).$promise.then(function(e){u(e)})}function l(e){o.go("discos",{id:e.id},{notify:!1}),u(e)}function d(e){r.show({controller:"AddDiscoController",controllerAs:"vm",templateUrl:"partials/discos/add.html",parent:angular.element(document.body),targetEvent:e}).then(function(e){void 0!==e&&p.discos.push(e)})}function c(e,t){t.preventDefault(),t.stopPropagation(),n["delete"]({id:e.id}).$promise.then(function(t){if(t.error)i.show(i.simple().content(t.error).theme("error-toast"));else{i.show(i.simple().content(t.message));var o=p.discos.indexOf(e);p.discos.splice(o,1)}})}function u(n){e.selectedItem=n;var i=p.discos.indexOf(n);r.show({controller:"AddDiscoController",controllerAs:"vm",templateUrl:"partials/discos/add.html",parent:angular.element(document.body),scope:e.$new()}).then(function(e){1!=e&&t.addOrUpdateList(p.discos,e,i),o.go("discos",{id:""},{notify:!1})})}var p=this;p.discos=n.query(),p.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},p.showAdd=d,p["delete"]=c,p.showEdit=l,a()}angular.module("backendApp.controllers").controller("DiscoListController",e),e.$inject=["$scope","$rootScope","$state","Disco","$mdDialog","$mdToast","$stateParams"]}(),function(){"use strict";angular.module("backendApp.controllers").controller("EventoListController",["$scope","Evento","$mdDialog","$mdToast",function(e,t,o,n){e.eventos=t.query(),e.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.showAdd=function(t){o.show({controller:"AddEventoController",templateUrl:"partials/eventos/add.html",parent:angular.element(document.body),targetEvent:t}).then(function(t){void 0!==t&&(t.fecha=new Date(t.fecha),e.eventos.push(t))})},e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.eventos.indexOf(o);e.eventos.splice(r,1)}})},e.showEdit=function(t){e.selectedItem=t,o.show({controller:"AddEventoController",templateUrl:"partials/eventos/add.html",parent:angular.element(document.body),scope:e.$new()})}}]),angular.module("backendApp.controllers").controller("AddEventoController",["$rootScope","$scope","$mdToast","$mdDialog","Evento","Upload",function(e,t,o,n,r,i){function s(){t.evento.$save(function(e){n.hide(t.evento),t.submitting=!1,o.show(o.simple().content("Nuevo evento guardado"))},function(e){o.show(o.simple().content(e.data.error).theme("error-toast")),t.submitting=!1})}function a(){t.submitting=!0,i.upload({url:e.upload_url,file:t.evento.imagen}).progress(function(e){t.progress=parseInt(100*e.loaded/e.total)}).success(function(e,o,n,r){t.evento.imagen=e.url,t.fileChanged=!0,t.progress=0,t.edit?l():s()}).error(function(e,n,r,i){o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1,t.progress=0})}function l(){r.update({id:t.evento.id},t.evento).$promise.then(function(e){t.submitting=!1,n.hide(t.evento)})}void 0!=t.selectedItem?(t.evento=t.selectedItem,t.evento.fecha=new Date(t.evento.fecha),t.edit=!0):t.evento=new r,t.hide=function(){n.hide()},t.submitting=!1,t.attempted=!1,t.submit=function(){return t.attempted=!0,t.form.$valid?void(t.fileChanged?a():t.edit?l():s()):!1},t.progress=0,t.fileChanged=!1,t.fileChange=function(){t.fileChanged=!0}}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("EventoListController",["$scope","Evento","$mdDialog","$mdToast",function(e,t,o,n){e.eventos=t.query(),e.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.showAdd=function(t){o.show({controller:"AddEventoController",templateUrl:"partials/eventos/add.html",parent:angular.element(document.body),targetEvent:t}).then(function(t){void 0!==t&&(t.fecha=new Date(t.fecha),e.eventos.push(t))})},e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.eventos.indexOf(o);e.eventos.splice(r,1)}})},e.showEdit=function(t){e.selectedItem=t,o.show({controller:"AddEventoController",templateUrl:"partials/eventos/add.html",parent:angular.element(document.body),scope:e.$new()})}}]),angular.module("backendApp.controllers").controller("AddEventoController",["$rootScope","$scope","$mdToast","$mdDialog","Evento","Upload",function(e,t,o,n,r,i){function s(){t.evento.$save(function(e){n.hide(t.evento),t.submitting=!1,o.show(o.simple().content("Nuevo evento guardado"))},function(e){o.show(o.simple().content(e.data.error).theme("error-toast")),t.submitting=!1})}function a(){t.submitting=!0,i.upload({url:e.upload_url,file:t.evento.imagen}).progress(function(e){t.progress=parseInt(100*e.loaded/e.total)}).success(function(e,o,n,r){t.evento.imagen=e.url,t.fileChanged=!0,t.progress=0,t.edit?l():s()}).error(function(e,n,r,i){o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1,t.progress=0})}function l(){r.update({id:t.evento.id},t.evento).$promise.then(function(e){t.submitting=!1,n.hide(t.evento)})}void 0!=t.selectedItem?(t.evento=t.selectedItem,t.evento.fecha=new Date(t.evento.fecha),t.edit=!0):t.evento=new r,t.hide=function(){n.hide()},t.submitting=!1,t.attempted=!1,t.submit=function(){return t.attempted=!0,t.form.$valid?void(t.fileChanged?a():t.edit?l():s()):!1},t.progress=0,t.fileChanged=!1,t.fileChange=function(){t.fileChanged=!0}}])}(),function(){"use strict";function e(e,t,o,n,r,i,s){function a(){return p.attempted=!0,p.submitting=!0,e.form.$valid?void(p.fileChanged?d():p.edit?u():c()):!1}function l(){p.fileChanged=!0}function d(){s.upload({url:t.upload_url,file:p.integrante.imagen}).progress(function(e){p.progress=parseInt(100*e.loaded/e.total)}).success(function(e,t,o,n){p.integrante.imagen=e.url,p.fileChanged=!0,p.progress=0,p.edit?u():c()}).error(function(e,t,n,r){o.show(o.simple().content(e.error).theme("error-toast")),p.submitting=!1,p.progress=0})}function c(){r.save(p.integrante).$promise.then(function(e,t,r){console.log(t),console.log(r),e.error?o.show(o.simple().content(e.error).theme("error-toast")):(n.hide(e),o.show(o.simple().content("Nueva integrante guardado"))),p.submitting=!1})}function u(){r.update({id:p.integrante.id},p.integrante).$promise.then(function(e){p.submitting=!1,n.hide(p.integrante)})}var p=this;p.edit=!1,p.discos=i.query(),p.progress=0,p.submitting=!1,p.fileChanged=!1,p.attempted=!1,p.submit=a,p.fileChange=l,p.hide=n.hide,void 0!=e.selectedItem?(p.integrante=e.selectedItem,p.edit=!0):p.integrante=new r}angular.module("backendApp.controllers").controller("AddIntegranteController",e),e.$inject=["$scope","$rootScope","$mdToast","$mdDialog","Integrante","Disco","Upload"]}(),function(){"use strict";function e(e,t,o,n,r,i,s){function a(){i.id&&o.get({id:i.id}).$promise.then(function(e){u(e)})}function l(e){n.show({controller:"AddIntegranteController",controllerAs:"vm",templateUrl:"partials/integrantes/add.html",parent:angular.element(document.body),targetEvent:e}).then(function(e){1!=e&&addOrUpdateList(p.integrantes,e)})}function d(e,t){t.preventDefault(),t.stopPropagation(),o["delete"]({id:e.id}).$promise.then(function(t){if(t.error)r.show(r.simple().content(t.error).theme("error-toast"));else{r.show(r.simple().content(t.message));var o=p.integrantes.indexOf(e);p.integrantes.splice(o,1)}})}function c(e){s.go("integrantes",{id:e.id},{notify:!1}),u(e)}function u(o){t.selectedItem=angular.copy(o);var r=p.integrantes.indexOf(o);n.show({controller:"AddIntegranteController",controllerAs:"vm",templateUrl:"partials/integrantes/add.html",parent:angular.element(document.body),scope:t.$new()}).then(function(t){1!=t&&e.addOrUpdateList(p.integrantes,t,r),s.go("integrantes",{id:""},{notify:!1})})}var p=this;p.integrantes=o.query(),p.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},p.showAdd=l,p["delete"]=d,p.showEdit=c,p.hide=n.cancel,a()}angular.module("backendApp.controllers").controller("IntegranteListController",e),e.$inject=["$rootScope","$scope","Integrante","$mdDialog","$mdToast","$stateParams","$state"]}(),function(){"use strict";angular.module("backendApp.controllers").controller("AddNoticiaController",["$rootScope","$scope","$mdToast","$mdDialog","Noticia","Categoria","Video","Cancion","Ad","Upload","Tag",function(e,t,o,n,r,i,s,a,l,d,c){function u(){t.noticia.$save(function(e){n.hide(t.noticia),t.submitting=!1,o.show(o.simple().content("Nueva noticia guardada"))},function(e){o.show(o.simple().content(e.data.error).theme("error-toast")),t.submitting=!1})}function p(){t.submitting=!0,d.upload({url:e.upload_url,file:t.noticia.imagen}).progress(function(e){t.progress=parseInt(100*e.loaded/e.total)}).success(function(e,o,n,r){t.noticia.imagen=e.url,t.fileChanged=!0,t.progress=0,t.edit?m():u()}).error(function(e,n,r,i){o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1,t.progress=0})}function m(){r.update({id:t.noticia.id},t.noticia).$promise.then(function(e){t.submitting=!1,t.noticia=e,t.noticia.fecha=new Date(t.noticia.fecha),t.noticia.categoria_id=t.noticia.categorias[0].id,t.noticia.video_id=t.noticia.video.id,t.noticia.cancion_id=t.noticia.cancion.id,n.hide(e)})}function f(e){var o=e?t.tags.then(function(t){return t.filter(g(e))}):[];return o}function g(e){var t=angular.lowercase(e);return function(e){return 0===e.nombre.toLowerCase().indexOf(t)}}function h(){return c.query().$promise.then(function(e){return e})}void 0!=t.selectedItem?(t.noticia=t.selectedItem,t.noticia.fecha=new Date(t.noticia.fecha),t.noticia.categoria_id=t.noticia.categorias[0].id,t.noticia.video_id=t.noticia.video.id,t.noticia.cancion_id=t.noticia.cancion.id,t.edit=!0):(t.noticia=new r,t.noticia.tags=[]),t.categorias=i.query(),t.videos=s.query(),t.canciones=a.query(),t.ads=l.query(),t.tags=c.query(),t.posiciones=new Array(6),t.hide=function(){n.hide()},t.submitting=!1,t.attempted=!1,t.submit=function(){return t.attempted=!0,t.form.$valid?void(t.fileChanged?p():t.edit?m():u()):!1},t.progress=0,t.fileChanged=!1,t.fileChange=function(){t.fileChanged=!0},t.searchText=null,t.querySearch=f,t.tags=h(),t.selectedTags=[],t.numberChips=[],t.numberChips2=[],t.numberBuffer="",t.newTag=function(e){if(e.nombre)return e;var t={nombre:e};return t}}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("NoticiaListController",["$scope","Noticia","$mdDialog","$mdToast",function(e,t,o,n){e.noticias=t.query(),e.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.showAdd=function(t){o.show({controller:"AddNoticiaController",templateUrl:"partials/noticias/add.html",parent:angular.element(document.body),targetEvent:t}).then(function(t){void 0!==t&&e.noticias.push(t)})},e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.noticias.indexOf(o);e.noticias.splice(r,1)}})},e.showEdit=function(t){e.selectedItem=t,o.show({controller:"AddNoticiaController",templateUrl:"partials/noticias/add.html",parent:angular.element(document.body),scope:e.$new()})}}])}(),function(){"use strict";function e(e,t,o,n,r,i){function s(){d.ad.$save(function(e){n.hide(d.ad),d.submitting=!1,o.show(o.simple().content("Nuevo ad guardado"))},function(e){o.show(o.simple().content(e.data.error).theme("error-toast")),d.submitting=!1})}function a(){r.update({id:d.ad.id},d.ad).$promise.then(function(e){console.log("finished",e),d.submitting=!1,n.hide(d.ad)})}function l(){d.submitting=!0,i.upload({url:e.upload_url,file:d.ad.source
}).progress(function(e){d.progress=parseInt(100*e.loaded/e.total)}).success(function(e,t,o,n){d.ad.source=e.url,d.ad.type=e.type,d.fileChanged=!1,d.progress=0,d.edit?a():s()}).error(function(e,t,n,r){o.show(o.simple().content(e.error).theme("error-toast")),d.submitting=!1,d.progress=0})}var d=this;d.edit=!1,d.submitting=!1,d.attempted=!1,d.progress=0,d.fileChanged=!1,d.sizes=["300x250","300x600","728X90","320x50","810X550"],d.posiciones=[1,2,3],void 0!=t.selectedItem?(d.ad=t.selectedItem,d.edit=!0):d.ad=new r,d.hide=n.hide,d.submit=function(){return d.attempted=!0,t.adForm.$valid?(d.submitting=!0,void(d.fileChanged?l():d.edit?a():s())):!1},d.fileChange=function(){d.fileChanged=!0}}angular.module("backendApp.controllers").controller("AddAdController",e),e.$inject=["$rootScope","$scope","$mdToast","$mdDialog","Ad","Upload"]}(),function(){"use strict";function e(e,t,o,n,r,i){function s(e){i.go("ads",{id:e.id},{notify:!1}),a(e)}function a(o){t.selectedItem=o;var r=l.ads.indexOf(o);n.show({controller:"AddAdController",controllerAs:"vm",templateUrl:"partials/promos/add.html",parent:angular.element(document.body),scope:t.$new()}).then(function(t){1!=t&&e.addOrUpdateList(l.ads,t,r),i.go("ads",{id:""},{notify:!1})})}var l=this;l.ads=o.query(),l.showEdit=s,l.options={rowHeight:"auto",footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},l.showAdd=function(e){n.show({controller:"AddAdController",controllerAs:"vm",templateUrl:"partials/promos/add.html",parent:angular.element(document.body),targetEvent:e}).then(function(e){e!==!0&&l.ads.push(e)})},l["delete"]=function(e,t){t.preventDefault(),t.stopPropagation();var i=n.confirm().content("Esta seguro que desea borrar este elemento").ok("Borrar").cancel("Cancelar").targetEvent(t);n.show(i).then(function(){o["delete"]({id:e.id}).$promise.then(function(t){if(t.error)r.show(r.simple().content(t.error).theme("error-toast"));else{r.show(r.simple().content(t.message));var o=l.ads.indexOf(e);l.ads.splice(o,1)}})})}}angular.module("backendApp.controllers").controller("AdListController",e),e.$inject=["$rootScope","$scope","Ad","$mdDialog","$mdToast","$state"]}(),function(){"use strict";angular.module("backendApp.controllers").controller("UserListController",["$scope","User","$mdDialog","USER_ROLES","$mdToast",function(e,t,o,n,r){e.users=t.query(),e.roles={},e.roles[n.admin]="Administrador",e.roles[n.editor]="Editor",e.roles[n.editorPlus]="Editor Plus",e.roles[n.analista]="Analista",e.roles[n.lector]="Lector",e.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.showAdd=function(t){o.show({controller:"UserController",templateUrl:"partials/users/add.html",parent:angular.element(document.body),targetEvent:t}).then(function(t){void 0!==t&&e.users.push(t)})},e["delete"]=function(o,n){n.preventDefault(),n.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)r.show(r.simple().content(t.error).theme("error-toast"));else{r.show(r.simple().content(t.message));var n=e.users.indexOf(o);e.users.splice(n,1)}})},e.showEdit=function(t){e.selectedItem=t,o.show({controller:"UserController",templateUrl:"partials/users/add.html",parent:angular.element(document.body),scope:e.$new()})}}]),angular.module("backendApp.controllers").controller("UserController",["$rootScope","$scope","$mdToast","$mdDialog","User","Upload","USER_ROLES",function(e,t,o,n,r,i,s){function a(){r.save(t.user,function(e){e.error?(o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1):(n.hide(t.user),o.show(o.simple().content("Nuevo usuario guardado")))})}function l(){t.submitting=!0,i.upload({url:e.upload_url,file:t.user.imagen}).progress(function(e){t.progress=parseInt(100*e.loaded/e.total)}).success(function(e,o,n,r){t.user.imagen=e.url,t.filechanged=!0,t.progress=0,t.edit?d():a()}).error(function(e,n,r,i){o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1,t.progress=0})}function d(){r.update({id:t.user.id},t.user).$promise.then(function(e){t.submitting=!1,n.hide(t.user)})}void 0!=t.selectedItem?(t.user=t.selectedItem,t.edit=!0):t.user=new r,t.submitting=!1,t.attempted=!1,t.progress=0,t.filechanged=!1,t.roles={},t.roles[s.admin]="Administrador",t.roles[s.editor]="Editor",t.roles[s.editorPlus]="Editor Plus",t.roles[s.analista]="Analista",t.roles[s.lector]="Lector",t.hide=function(){n.hide()},t.submit=function(){return t.attempted=!0,t.form.$valid?void(t.fileChanged?l():t.edit?d():a()):!1},t.fileChange=function(){t.filechanged=!1}}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("UserListController",["$scope","User","$mdDialog","USER_ROLES","$mdToast",function(e,t,o,n,r){e.users=t.query(),e.roles={},e.roles[n.admin]="Administrador",e.roles[n.editor]="Editor",e.roles[n.editorPlus]="Editor Plus",e.roles[n.analista]="Analista",e.roles[n.lector]="Lector",e.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.showAdd=function(t){o.show({controller:"UserController",templateUrl:"partials/users/add.html",parent:angular.element(document.body),targetEvent:t}).then(function(t){void 0!==t&&e.users.push(t)})},e["delete"]=function(o,n){n.preventDefault(),n.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(t.error)r.show(r.simple().content(t.error).theme("error-toast"));else{r.show(r.simple().content(t.message));var n=e.users.indexOf(o);e.users.splice(n,1)}})},e.showEdit=function(t){e.selectedItem=t,o.show({controller:"UserController",templateUrl:"partials/users/add.html",parent:angular.element(document.body),scope:e.$new()})}}]),angular.module("backendApp.controllers").controller("UserController",["$rootScope","$scope","$mdToast","$mdDialog","User","Upload","USER_ROLES",function(e,t,o,n,r,i,s){function a(){r.save(t.user,function(e){e.error?(o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1):(n.hide(t.user),o.show(o.simple().content("Nuevo usuario guardado")))})}function l(){t.submitting=!0,i.upload({url:e.upload_url,file:t.user.imagen}).progress(function(e){t.progress=parseInt(100*e.loaded/e.total)}).success(function(e,o,n,r){t.user.imagen=e.url,t.filechanged=!0,t.progress=0,t.edit?d():a()}).error(function(e,n,r,i){o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1,t.progress=0})}function d(){r.update({id:t.user.id},t.user).$promise.then(function(e){t.submitting=!1,n.hide(t.user)})}void 0!=t.selectedItem?(t.user=t.selectedItem,t.edit=!0):t.user=new r,t.submitting=!1,t.attempted=!1,t.progress=0,t.filechanged=!1,t.roles={},t.roles[s.admin]="Administrador",t.roles[s.editor]="Editor",t.roles[s.editorPlus]="Editor Plus",t.roles[s.analista]="Analista",t.roles[s.lector]="Lector",t.hide=function(){n.hide()},t.submit=function(){return t.attempted=!0,t.form.$valid?void(t.fileChanged?l():t.edit?d():a()):!1},t.fileChange=function(){t.filechanged=!1}}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("VideoListController",["$scope","Video","$mdDialog","$mdToast",function(e,t,o,n){e.videos=t.query(),e.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.showAdd=function(t){o.show({controller:"AddVideoController",templateUrl:"partials/videos/add.html",parent:angular.element(document.body),targetEvent:t}).then(function(t){void 0!==t&&e.videos.push(t)})},e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(console.log(t),t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.videos.indexOf(o);e.videos.splice(r,1)}})},e.showEdit=function(t){e.selectedItem=t,o.show({controller:"AddVideoController",templateUrl:"partials/videos/add.html",parent:angular.element(document.body),scope:e.$new()})}}]),angular.module("backendApp.controllers").controller("AddVideoController",["$rootScope","$scope","$mdToast","$mdDialog","Video","Ad","Upload","$sce","$http",function(e,t,o,n,r,i,s,a,l){function d(){t.video.$save(function(e){n.hide(e),t.submitting=!1,o.show(o.simple().content("Nuevo ad guardado"))},function(e){o.show(o.simple().content(e.data.error).theme("error-toast")),t.submitting=!1})}function c(){t.submitting=!0,s.upload({url:e.upload_url,file:t.video.source}).progress(function(e){t.progress=parseInt(100*e.loaded/e.total)}).success(function(e,o,n,r){t.video.source=e.url,t.video.type=e.type,t.fileChanged=!0,t.progress=0,t.edit?u():d()}).error(function(e,n,r,i){o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1,t.progress=0})}function u(){r.update({id:t.video.id},t.video).$promise.then(function(e){t.submitting=!1,n.hide(t.video)})}t.submitting=!1,t.attempted=!1,t.progress=0,t.fileChanged=!1,t.isLink=!1,t.youtubeId="",t.ads=i.query(),void 0!=t.selectedItem?(t.video=t.selectedItem,t.video.ad_id=t.video.ad.id,t.edit=!0,"youtube"==t.video.type?(t.isLink=!0,t.youtubeId=t.video.source):" video"==t.video.type):t.video=new r,t.submit=function(){return t.attempted=!0,t.form.$valid?void(t.fileChanged&&!t.isLink?c():t.edit?u():d()):!1},t.hide=n.hide,t.fileChange=function(){t.fileChanged=!0,t.isLink=!1},t.linkChanged=function(){t.isLink=!0,l.post(e.server_url+"/api/utils/youtube",{url:t.video.source}).success(function(e){t.youtubeId="",e.id!==!1&&(t.youtubeId=e.id,t.video.type="youtube")})},t.getYt=function(e){return a.trustAsResourceUrl("https://www.youtube.com/embed/"+e)}}])}(),function(){"use strict";angular.module("backendApp.controllers").controller("VideoListController",["$scope","Video","$mdDialog","$mdToast",function(e,t,o,n){e.videos=t.query(),e.options={rowHeight:50,footerHeight:!1,headerHeight:50,scrollbarV:!1,selectable:!1,columnMode:"force"},e.showAdd=function(t){o.show({controller:"AddVideoController",templateUrl:"partials/videos/add.html",parent:angular.element(document.body),targetEvent:t}).then(function(t){void 0!==t&&e.videos.push(t)})},e["delete"]=function(o,r){r.preventDefault(),r.stopPropagation(),t["delete"]({id:o.id}).$promise.then(function(t){if(console.log(t),t.error)n.show(n.simple().content(t.error).theme("error-toast"));else{n.show(n.simple().content(t.message));var r=e.videos.indexOf(o);e.videos.splice(r,1)}})},e.showEdit=function(t){e.selectedItem=t,o.show({controller:"AddVideoController",templateUrl:"partials/videos/add.html",parent:angular.element(document.body),scope:e.$new()})}}]),angular.module("backendApp.controllers").controller("AddVideoController",["$rootScope","$scope","$mdToast","$mdDialog","Video","Ad","Upload","$sce","$http",function(e,t,o,n,r,i,s,a,l){function d(){t.video.$save(function(e){n.hide(e),t.submitting=!1,o.show(o.simple().content("Nuevo ad guardado"))},function(e){o.show(o.simple().content(e.data.error).theme("error-toast")),t.submitting=!1})}function c(){t.submitting=!0,s.upload({url:e.upload_url,file:t.video.source}).progress(function(e){t.progress=parseInt(100*e.loaded/e.total)}).success(function(e,o,n,r){t.video.source=e.url,t.video.type=e.type,t.fileChanged=!0,t.progress=0,t.edit?u():d()}).error(function(e,n,r,i){o.show(o.simple().content(e.error).theme("error-toast")),t.submitting=!1,t.progress=0})}function u(){r.update({id:t.video.id},t.video).$promise.then(function(e){t.submitting=!1,n.hide(t.video)})}t.submitting=!1,t.attempted=!1,t.progress=0,t.fileChanged=!1,t.isLink=!1,t.youtubeId="",t.ads=i.query(),void 0!=t.selectedItem?(t.video=t.selectedItem,t.video.ad_id=t.video.ad.id,t.edit=!0,"youtube"==t.video.type?(t.isLink=!0,t.youtubeId=t.video.source):" video"==t.video.type):t.video=new r,t.submit=function(){return t.attempted=!0,t.form.$valid?void(t.fileChanged&&!t.isLink?c():t.edit?u():d()):!1},t.hide=n.hide,t.fileChange=function(){t.fileChanged=!0,t.isLink=!1},t.linkChanged=function(){t.isLink=!0,l.post(e.server_url+"/api/utils/youtube",{url:t.video.source}).success(function(e){t.youtubeId="",e.id!==!1&&(t.youtubeId=e.id,t.video.type="youtube")})},t.getYt=function(e){return a.trustAsResourceUrl("https://www.youtube.com/embed/"+e)}}])}();
//# sourceMappingURL=data:application/json;base64,